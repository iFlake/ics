Class prototype:
    class Application
    {
        function __construct()
        {
            //All initialization steps
        }

        function Execute()
        {
            //Execute extension
        }

        function Query(parameters)
        {
            //Handle query
        }

        //All functions
    }

API:
    // # DEFAULTS
    variable: /itais/ics/entity/User /itais/ics/application::currentuser;
    variable: string /itais/ics/application/Defaults::title;
    variable: string /itais/ics/application/Defaults::host;
    // # PERMISSION API
    function: int /itais/ics/permissions/RegisterGroup(string name);
    function: void /itais/ics/permissions/Register(string name, int group, int<0-2> default);
    function: void /itais/ics/entity/User::SetPermission(string name, int<0-2> value, int id = -1);
    function: void /itais/ics/entity/Group::SetPermission(string name, int<0-2> value, int id = -1);
    function: boolean /itais/ics/entity/User::GetPermission(string name, int id= -1, boolean require_explicit = false);
    function: boolean /itais/ics/entity/Group::GetPermission(string name, int id = -1, boolean require_explicit = false);
    function: int<0-2> /itais/ics/entity/User::GetRawPermission(string name, int id = -1);
    function: int<0-2> /itais/ics/entity/Group::GetRawPermission(string name, int id = -1);
    // # NODE API
    function: void /itais/ics/nodes/Register(string name);
    // # NAVIGATION API
    function: void /itais/ics/intercept/Register(string input, string translate);
    // # HOOK API
    function: void /itais/ics/hook/Hook(string name, dynamic[] parameters = [], function event);
    function: void /itais/ics/hook/Emit(string name, dynamic[] parameters);

Native:
    variable: global string[] $config_mysql;
    variable: global mysqli $itais_ics_database_connection;
    variable: global mysqli $itais_ics_database_prefix;

Types:
    /itais/ics/entity/User::
        // # CONSTRUCTOR
        function: constructor(int uid);
        function: static /itais/ics/entity/User FromSession(string session);
        // # AUTHENCIATION
        variable: dynamic[] data;
        variable: private string salt;
        variable: private string password;
        function: boolean CheckPassword(string password);
        function: void SetPassword(string password);
        // # PERMISSIONS
        function: void SetPermission(string name, int<0-2> value, int id = -1);
        function: boolean GetPermission(string name, int id = -1);
        function: int GetRawPermission(string name, int id = -1);
        // # SESSIONS
        function: string GetSession();
        function: string DisposeSession(string session);
    /itais/ics/entity/Group::
        // # CONSTRUCTOR
        function: constructor(int uid);
        // # DISPLAY
        variable: string|null prename;
        variable: string|null postname;
        // # PERMISSIONS
        function: void SetPermission(string name, \itais\ics\permissions\Permission value, int id = -1);
        function: boolean GetPermission(string name, int id = -1, \itais\ics\permissions\Permission value, boolean require_explicit = false);
        function: int GetRawPermission(string name, int id = -1);
    /itais/ics/database/Table::
        // # CONSTRUCTOR
        function: constructor(string name);
        // # WRITE
        function: void Insert(indexed string[] values);
        function: void Update(indexed string[] values, string where = null);
        function: void Delete(string where = null);
        function: void Drop();
        // # READ
        function: indexed dynamic[][] Select(string[] values = null, string where = null);

DATABASE:
    // # USERS
    table: users(uid primary key integer unsigned autoincrement, salt varchar(32), password varchar(512));
    table: users_permissions(uid integer unsigned, name text, value bit(2), id integer unsigned);
